- hosts: all
  become: true
  gather_facts: yes


  vars_files:
    - variables.yml


  pre_tasks:
    - name: Install Python2 to make Ansible work
      raw: sudo apt-get update && sudo apt-get -y install python-minimal


  post_tasks:
    - include_tasks: include_event.yml
      vars:
        application: configure_all


  tasks:


    # System
    - name: Update and upgrade apt packages
      apt: upgrade=dist

    - name: Install NTP to avoid time drift and PIP to manage Python dependencies plus its build tools and dev tools
      apt:
        name: [ 'ntp', 'ntpdate', 'python3-pip', 'build-essential', 'libssl-dev', 'libffi-dev', 'git', 'whois', 'unzip' ]

    - name: Install the JDK
      apt: name=openjdk-8-jdk install_recommends=no


    # Allow SSH logins
    - name: Add a group for developers
      group:
        name: developers
        state: present

    - name: Add a regular user
      user:
        name: elastic-user
        password: "{{ssh_password }}"
        groups: developers
        shell: /bin/bash
        state: present

    - name: Create a file for that specific user only readable by them
      template: src=templates/secret.txt dest=/home/elastic-user/secret.txt owner=elastic-user mode=0600

    - name: Add a root user
      user:
        name: elastic-admin
        password: "{{ssh_password }}"
        groups: sudo
        shell: /bin/bash
        state: present

    - name: Allow passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Allow password based authentication for SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present

    - name: Allow our users to log in via SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^AllowUsers'
        line: 'AllowUsers ubuntu elastic-user elastic-admin'
        state: present

    - name: Restart SSH
      service: name=ssh state=restarted


    # osquery
    - name: Add osquery's repository key
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
        state: present

    - name: Add osquery's server repository
      apt_repository:
        repo: "deb [arch=amd64] https://osquery-packages.s3.amazonaws.com/deb deb main"
        state: present

    - name: Install osquery
      apt: name=osquery update_cache=true

    - name: Stop osquery since it sometimes need a few seconds between stop and start to work properly
      service: name=osqueryd state=stopped

    - name: Allow osquery to access the rsyslog.conf
      blockinfile:
        path: /etc/rsyslog.conf
        block: |
          template(
            name="OsqueryCsvFormat"
            type="string"
            string="%timestamp:::date-rfc3339,csv%,%hostname:::csv%,%syslogseverity:::csv%,%syslogfacility-text:::csv%,%syslogtag:::csv%,%msg:::csv%\n"
          )
          *.* action(type="ompipe" Pipe="/var/osquery/syslog_pipe" template="OsqueryCsvFormat")

    - name: Restart rsyslog
      service: name=rsyslog state=restarted

    - name: Provide the base configuration for osquery
      template: src=templates/osquery.conf dest=/etc/osquery/osquery.conf

    - name: Change the interval of the osquery queries to 5min so we can see results quicker
      replace:
        path: "/usr/share/osquery/packs/{{ item }}.conf"
        regexp: '"interval" : .*'
        replace: '"interval" : "300",'
      loop:
        - osquery-monitoring
        - incident-response
        - it-compliance
        - vuln-management

    - name: Restart osquery and make sure it autostarts
      service: name=osqueryd state=restarted enabled=yes


    # Elasticsearch
    - name: Install Elasticsearch
      apt: deb={{ elastic_download }}/downloads/elasticsearch/elasticsearch-{{ elastic_version }}.deb

    - name: Stop Elasticsearch
      service: name=elasticsearch state=stopped

    - name: Change Elasticsearch's minimum memory usage
      lineinfile:
        dest: /etc/elasticsearch/jvm.options
        regexp: "^-Xms"
        line: "-Xms768m"
        state: present

    - name: Change Elasticsearch's maximum memory usage
      lineinfile:
        dest: /etc/elasticsearch/jvm.options
        regexp: "^-Xmx"
        line: "-Xmx768m"
        state: present

    - name: Do not swap
      lineinfile:
        dest: /etc/elasticsearch/elasticsearch.yml
        regexp: "bootstrap.memory_lock"
        line: "bootstrap.memory_lock: true"
        state: present

    - name: Enable monitoring of the Elastic Stack components
      lineinfile:
        dest: /etc/elasticsearch/elasticsearch.yml
        regexp: "xpack.monitoring.collection.enabled"
        line: "xpack.monitoring.collection.enabled: true"
        state: present

    - name: Enable security
      lineinfile:
        dest: /etc/elasticsearch/elasticsearch.yml
        regexp: "xpack.security.enabled"
        line: "xpack.security.enabled: true"
        state: present

    - name: Collect the list of installed Elasticsearch plugins
      command: /usr/share/elasticsearch/bin/elasticsearch-plugin list
      register: elasticsearch_plugins

    - name: Add the ingest-geoip plugin to Elasticsearch
      command: /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-geoip --batch
      when: "'ingest-geoip' not in elasticsearch_plugins.stdout"

    - name: Add the ingest-user-agent plugin to Elasticsearch
      command: /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-user-agent --batch
      when: "'ingest-user-agent' not in elasticsearch_plugins.stdout"

    - name: Remove a user for Elasticsearch (just in case we want to make any changes)
      command: /usr/share/elasticsearch/bin/elasticsearch-users userdel {{ elasticsearch_user }}
      ignore_errors: true

    - name: Create a user for Elasticsearch
      command: /usr/share/elasticsearch/bin/elasticsearch-users useradd {{ elasticsearch_user }} -p {{ elasticsearch_password }} -r superuser

    - name: Restart Elasticsearch and make sure it autostarts
      service: name=elasticsearch state=restarted enabled=yes

    - name: Wait for Elasticsearch to become available
      wait_for:
        port: 9200
        delay: 5

    - name: Active the 30 day X-Pack trial
      uri:
        url: "{{elasticsearch_host}}_xpack/license/start_trial?acknowledge=true"
        method: POST
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        force_basic_auth: true
        status_code:
          - 200
          - 403 #Trial was already activated

    - name: Register a global index template
      uri:
        url: "{{elasticsearch_host}}_template/template_global"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body:
          template: "*"
          settings:
            number_of_shards: 1
            number_of_replicas: 0
            refresh_interval: 2s
        status_code:
          - 200
          - 201


    # Kibana
    - name: Install Kibana
      apt: deb={{ elastic_download }}/downloads/kibana/kibana-{{ elastic_version }}-amd64.deb

    - name: Stop Kibana
      service: name=kibana state=stopped

    - name: Make Kibana available on all network interfaces
      lineinfile:
        dest: /etc/kibana/kibana.yml
        regexp: '^server.host'
        line: 'server.host: "0.0.0.0"'

    - name: Create the Kibana logging directory
      file:
        path: /var/log/kibana/
        state: directory
        owner: kibana
        group: kibana

    - name: Enable persistent Kibana logs
      lineinfile:
        dest: /etc/kibana/kibana.yml
        regexp: '^logging.dest'
        line: 'logging.dest: /var/log/kibana/kibana.log'

    - name: Set the username for the Elasticsearch user
      lineinfile:
        dest: /etc/kibana/kibana.yml
        regexp: "^elasticsearch.username"
        line: "elasticsearch.username: {{ elasticsearch_user }}"
        state: present

    - name: Set the password for the Elasticsearch user
      lineinfile:
        dest: /etc/kibana/kibana.yml
        regexp: "^elasticsearch.password"
        line: "elasticsearch.password: {{ elasticsearch_password }}"
        state: present

    - name: Restart Kibana and make sure it autostarts
      service: name=kibana state=restarted enabled=yes

    - name: Wait for Kibana to become available, since later steps depend on this
      wait_for:
        port: 5601
        delay: 5

    - name: Check if Kibana is available locally and the firewall rules are correct
      local_action: uri url="http://{{ inventory_hostname }}:5601"
      become: false


    # Beats
    - name: Set the Elasticsearch password for Beats and APM
      lineinfile:
        dest: /tmp/cred
        line: "{{ elasticsearch_password }}"
        state: present
        create: yes
        mode: 0600

    - name: Get the Beats
      apt: deb={{ elastic_download }}/downloads/beats/{{ item }}/{{ item }}-{{ elastic_version }}-amd64.deb
      loop:
      - auditbeat
      - filebeat
      - heartbeat
      - metricbeat
      - packetbeat

    - name: Change the Beats configuration
      template: "src=templates/{{ item }}.yml dest=/etc/{{ item }}/{{ item }}.yml"
      loop:
      - auditbeat
      - filebeat
      - heartbeat
      - metricbeat
      - packetbeat

    - name: Create the Beats keystores
      command: "{{ item }} keystore create --force"
      loop:
      - auditbeat
      - filebeat
      - heartbeat
      - metricbeat
      - packetbeat

    - name: Set the password in the Beats keystore files
      shell: cat /tmp/cred | {{ item }} keystore add ES_PWD --stdin --force
      loop:
      - auditbeat
      - filebeat
      - heartbeat
      - metricbeat
      - packetbeat

    - name: Restart and make sure the Beats autostart
      service: name={{ item }} state=restarted enabled=yes
      loop:
      - auditbeat
      - filebeat
      - heartbeat-elastic
      - metricbeat
      - packetbeat

    - name: Wait if the Beats are actually running
      pause: minutes=1

    - name: Get the state of all services and check the status of Auditbeat
      service_facts: ~
      failed_when: ansible_facts.services.auditbeat.state != "running"

    - name: Get the state of all services and check the status of Filebeat
      service_facts: ~
      failed_when: ansible_facts.services.filebeat.state != "running"

    - name: Get the state of all services and check the status of Heartbeat
      service_facts: ~
      failed_when: ansible_facts.services["heartbeat-elastic"].state != "running"

    - name: Get the state of all services and check the status of Metricbeat
      service_facts: ~
      failed_when: ansible_facts.services.metricbeat.state != "running"

    - name: Get the state of all services and check the status of Packetbeat
      service_facts: ~
      failed_when: ansible_facts.services.packetbeat.state != "running"


    # APM
    - name: Install APM
      apt: deb={{ elastic_download }}/downloads/apm-server/apm-server-{{ elastic_version }}-amd64.deb

    - name: Change the APM configuration
      template: src=templates/apm-server.yml dest=/etc/apm-server/apm-server.yml

    - name: Create the APM keystore
      command: apm-server keystore create --force

    - name: Set the secret for APM
      lineinfile:
        dest: /tmp/sec
        line: "{{ apm_secret }}"
        state: present
        create: yes
        mode: 0600

    - name: Set the password in the APM keystore file
      shell: cat /tmp/cred | apm-server keystore add ES_PWD --stdin --force

    - name: Set the secret in the APM keystore file
      shell: cat /tmp/sec | apm-server keystore add APM_SEC --stdin --force

    - name: Remove the password file
      file:
        path: /tmp/cred
        state: absent

    - name: Remove the secret file
      file:
        path: /tmp/sec
        state: absent

    - name: Restart APM and make sure it autostarts
      service: name=apm-server state=restarted enabled=yes

    - name: Fetch the APM agent
      get_url:
        url: "https://search.maven.org/remotecontent?filepath=co/elastic/apm/elastic-apm-agent/{{ apm_java_version }}/elastic-apm-agent-{{ apm_java_version }}.jar"
        dest: "/opt/elastic-apm-agent-{{ apm_java_version }}.jar"
        mode: 0444

    - name: Wait if APM is actually running
      pause: minutes=1

    - name: Get the state of all services and check the status of APM
      service_facts: ~
      failed_when: ansible_facts.services["apm-server"].state != "running"


    # Set a default index pattern
    - name: Set Metricbeat as the default index pattern
      uri:
        url: "{{kibana_host}}/api/kibana/settings/defaultIndex"
        body_format: json
        method: POST
        force_basic_auth: true
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        headers:
          kbn-xsrf: kibana
        body:
          value: "metricbeat-*"


    # Watcher
    - name: Add an example Watch from a local file
      uri:
        url: "{{elasticsearch_host}}_xpack/watcher/watch/heapsize"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body: "{{ lookup('file','alerting_heapsize.json') }}"
        status_code:
          - 201
          - 200


    # nginx
    - name: Install nginx
      apt: name=nginx

    - name: Change the nginx configuration
      template: src=templates/nginx.conf dest=/etc/nginx/sites-available/default

    - name: Restart nginx and make sure it autostarts
      service: name=nginx state=restarted enabled=yes


    # MySQL
    - name: Install the DEB packages required for Ansible's MySQL modules
      apt:
        name: [ 'python3-dev', 'libmysqlclient-dev' ]

    - name: Install the Python package required for Ansible's MySQL modules
      pip: name=mysqlclient

    - name: Install MySQL
      apt: name=mysql-server

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ""
        host_all: yes
        state: absent

    - name: Create database user and password for MySQL with all database privileges
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "*.*:ALL"
        host: "%"
        state: present

    - name: Create a new database for Java
      mysql_db:
        name: "{{ mysql_database }}"
        state: present

    - name: Create a new database for SilverStripe
      mysql_db:
        name: "{{ silverstripe_database }}"
        state: present

    - name: Bind MySQL to all interfaces
      ini_file: dest=/etc/mysql/mysql.conf.d/mysqld.cnf
            section=mysqld
            option=bind-address
            value="0.0.0.0"

    - name: Restart MySQL and make sure it autostarts
      service: name=mysql state=restarted enabled=yes


    # ApacheBench
    - name: Install ApacheBench
      apt:
        name: [ 'apache2-utils', 'parallel' ]

    - name: Add a list of URLs to benchmark
      template: src=templates/urls.txt dest=/home/ubuntu/urls.txt owner=ubuntu group=ubuntu mode=0644

    - name: Add a quick ApacheBench script
      copy:
        src: files/ab.sh
        dest: /home/ubuntu/ab.sh
        owner: ubuntu
        group: ubuntu
        mode: 0755


    # Gradle
    - name: Extract Gradle
      unarchive:
        src: "https://services.gradle.org/distributions/gradle-{{ gradle_version }}-all.zip"
        dest: /usr/local/
        remote_src: yes

    - name: Set Gradle home
      lineinfile:
        path: /etc/profile
        regexp: 'GRADLE_HOME'
        line: 'export GRADLE_HOME=/usr/local/gradle-{{ gradle_version }}/'
        state: present

    - name: Set Gradle path
      lineinfile:
        path: /etc/profile
        regexp: 'PATH'
        line: 'export PATH=${GRADLE_HOME}bin:${PATH}'
        state: present
