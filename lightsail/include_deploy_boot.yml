- name: Package the JAR
  local_action: shell cd ../java/{{ application }}/; gradle build
  become: false
  changed_when: true

- name: Get the current timestamp
  set_fact:
    current_timestamp: "{{ ansible_date_time.epoch }}"

- name: Make sure that the logging directory exists
  file:
    path: /var/log/apps/
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: 0755

- name: Deploy the executable uber JAR
  copy:
    src: "../java/{{ application }}/build/libs/{{ application }}.jar"
    dest: "/opt/{{ application }}_{{ current_timestamp }}.jar"
    owner: ubuntu
    group: ubuntu
    mode: 0500

- name: Provide a conf file to run it as a service
  template:
    src: templates/{{ application }}.conf
    dest: "/opt/{{ application }}_{{ current_timestamp }}.conf"
    owner: root
    group: root
    mode: 0400

- name: Check if there is a previous version
  stat:
    path: "/opt/{{ application }}.jar"
  register: symlink

- name: Link to current version
  file:
    src: "/opt/{{ application }}_{{ current_timestamp }}.jar"
    dest: "/opt/{{ application }}.jar"
    owner: ubuntu
    group: ubuntu
    state: link

- name: Link the JAR so it can be managed as a service through init.d
  file:
    src: "/opt/{{ application }}.jar"
    dest: "/etc/init.d/{{ application }}"
    state: link
    owner: ubuntu
    group: ubuntu

- name: Restart the JAR, make sure it autostarts, and reload the configuration
  systemd: name="{{ application }}" state=restarted enabled=yes daemon_reload=yes

- name: Wait for the Java application to start up
  pause: seconds=30

- name: Check if the service is available
  uri: url="https://{{ inventory_hostname }}/health"
  register: response
  ignore_errors: yes

- name: Remove old JARs (keeping the five latest good ones)
  shell: "ls -tr /opt/{{ application }}_*.jar | head -n -5 | xargs rm -f"
  register: remove_output

- name: Remove old configs (keeping the five latest good ones)
  shell: "ls -tr /opt/{{ application }}_*.conf | head -n -5 | xargs rm -f"
