{
  "trigger": {
    "schedule": {
      "interval": "1m"
    }
  },
  "input": {
    "search": {
      "request": {
        "search_type": "query_then_fetch",
        "indices": [
          "metricbeat-*"
        ],
        "types": [],
        "body": {
          "size": 0,
          "query": {
            "bool": {
              "filter": {
                "range": {
                  "@timestamp": {
                    "gte": "{{ctx.trigger.scheduled_time}}||-5m",
                    "lte": "{{ctx.trigger.scheduled_time}}",
                    "format": "strict_date_optional_time||epoch_millis"
                  }
                }
              }
            }
          },
          "aggs": {
            "bucketAgg": {
              "terms": {
                "field": "beat.name",
                "size": 5,
                "order": {
                  "metricAgg": "desc"
                }
              },
              "aggs": {
                "metricAgg": {
                  "max": {
                    "field": "jolokia.metrics.memory.heap_usage.used"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "condition": {
    "script": {
      "source": "ArrayList arr = ctx.payload.aggregations.bucketAgg.buckets; for (int i = 0; i < arr.length; i++) { if (arr[i]['metricAgg'].value > params.threshold) { return true; } } return false;",
      "lang": "painless",
      "params": {
        "threshold": 50000000
      }
    }
  },
  "transform": {
    "script": {
      "source": "HashMap result = new HashMap(); ArrayList arr = ctx.payload.aggregations.bucketAgg.buckets; ArrayList filteredHits = new ArrayList(); for (int i = 0; i < arr.length; i++) { HashMap filteredHit = new HashMap(); filteredHit.key = arr[i].key; filteredHit.value = arr[i]['metricAgg'].value; if (filteredHit.value > params.threshold) { filteredHits.add(filteredHit); } } result.results = filteredHits; return result;",
      "lang": "painless",
      "params": {
        "threshold": 50000000
      }
    }
  },
  "actions": {
    "logging_1": {
      "logging": {
        "level": "info",
        "text": "Heap is too large"
      }
    }
  },
  "metadata": {
    "name": "Heap",
    "watcherui": {
      "trigger_interval_unit": "m",
      "agg_type": "max",
      "time_field": "@timestamp",
      "trigger_interval_size": 1,
      "term_size": 5,
      "time_window_unit": "m",
      "threshold_comparator": ">",
      "term_field": "beat.name",
      "index": [
        "metricbeat-*"
      ],
      "time_window_size": 5,
      "threshold": 50000000,
      "agg_field": "jolokia.metrics.memory.heap_usage.used"
    },
    "xpack": {
      "type": "threshold"
    }
  },
  "status": {
    "state": {
      "active": true,
      "timestamp": "2017-09-29T13:31:00.309Z"
    },
    "actions": {
      "logging_1": {
        "ack": {
          "timestamp": "2017-09-29T13:32:00.822Z",
          "state": "ackable"
        },
        "last_execution": {
          "timestamp": "2017-09-29T13:40:03.537Z",
          "successful": true
        },
        "last_successful_execution": {
          "timestamp": "2017-09-29T13:40:03.537Z",
          "successful": true
        }
      }
    },
    "version": -1,
    "last_checked": "2017-09-29T13:40:03.537Z",
    "last_met_condition": "2017-09-29T13:40:03.537Z"
  }
}